== Introduction

FRQ-Bugtracker is an attempt to write a good issue tracker, that is, a small,
simple, fast and customizable one.

This document contains the design concepts.

== Overview
----------------------------------------
┌────────────────────────────────────┐
│ backend: CouchDB, git, …           │
└────────────────────────────────────┘

┌────────────────────────────────────┐
│ manager, speaks HTTP               │
└────────────────────────────────────┘

┌────────────────────────────────────┐
│ frontend: Web, Mail, CLI, XMPP, …  │
└────────────────────────────────────┘
----------------------------------------

== Communication layer

HTTP requests contain all payload encoded in JSON in their body to circumvent
the length limitation of HTTP headers.

=== Specified requests

The following requests have to be implemented by the manager:

1) Creating a new issue

 POST /write HTTP/1.1
 User-agent: <arbitrary user agent>
 X-emit-API-version: 1

 <arbitrary json encoded key/value pairs>

2) Creating a new comment
 
 POST /write HTTP/1.1

 {
	 "_id":"foo"
	 <arbitrary key/value pairs>
 }

3) Getting issues

 POST /read HTTP/1.1

 {
	 "_id":"foo"
 }

or:

 POST /read HTTP/1.1

 {
	 "_filter" : {
		 <arbitrarily complex filters implemented by scytale>
	 }
	 "_fields" : [
	 	"date",
		"status",
		...
	 ]
 }


== Core

=== File structure

-------------------------------------------
<issue-id>/
         meta.txt
	 <comment-id>/
	              meta.txt
		      comment.txt
		      attach/
		             basename.jpg
                      <more-comments>
		      ...
-------------------------------------------

Where +<comment-id>+ is (for the git backend) a SHA-1 sum representing the
contents of the tree which the comment contained when created.

=== File format (meta.txt)

All internals fields are uppercase, all user defined fields are lowercase.

TYPE:: Type of this file (only +comment+ or +issue+ at the moment).

CDATE:: Creation date of the file, as unix timestamp

MDATE:: Modification date of the file, as unix timestamp

<internal>:: The value of the user-defined field with internal name
+<internal>+.

=== Field definition

The field definition defines what information is requested from the user
and stored in the issue. It is loaded as part of the configuration of the
core.

name:: The name of the field when internally used. This should be
something simple, but, most importantly, it must never change.

name-LANG:: The name of the field as displayed in the frontend, were +LANG+ is
a lowercase two-letter language code.

help-LANG:: Additional help text for the user, where +LANG+ is a lowercase
two-letter language code.

type:: See section Field types.

acl:: Not yet implemented.

allowed:: The possible values of this field when it is a list.

default:: The default value of this field.

==== Field types

line:: A single line of text.

text:: Multi-line text.

list:: The user can chose any of the +allowed+ values of this field. If he
submits something different, an error will be returned.

radio:: See +list+, but the frontend should not chose a drop-down list for
displaying this field, but rather a list of radio buttons, if possible.

checkbox:: Only yes/no (or other binary values like true/false, 1/0, …) are
possible inputs.

constant-text:: This may be used by hooks to provide some additional
information inside of the form.

=== API

